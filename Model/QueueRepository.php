<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  ${MAGENTO_MODULE_NAMESPACE}
 * @package   ${MAGENTO_MODULE_NAMESPACE}_${MAGENTO_MODULE}
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

namespace BitTools\SkyHub\Model;

use BitTools\SkyHub\Api\Data;
use BitTools\SkyHub\Api\QueueRepositoryInterface;
use BitTools\SkyHub\Helper\Context;
use Magento\Framework\Api\SearchCriteriaInterface;
use BitTools\SkyHub\Model\ResourceModel\Queue as ResourceModel;

class QueueRepository implements QueueRepositoryInterface
{
    
    /** @var Context */
    protected $context;
    
    /** @var string */
    protected $resourceClass = ResourceModel::class;
    
    /** @var string */
    protected $entityClass = Queue::class;
    
    /** @var string */
    protected $collectionClass = ResourceModel\Collection::class;
    
    
    /**
     * QueueRepository constructor.
     *
     * @param Context $context
     */
    public function __construct(Context $context)
    {
        $this->context = $context;
    }
    
    
    /**
     * Retrieve all attributes for entity type
     *
     * @param SearchCriteriaInterface $searchCriteria
     */
    public function getList(SearchCriteriaInterface $searchCriteria)
    {
        // return $this->getCollection();
    }
    
    
    /**
     * @param int $queueId
     *
     * @return Queue
     */
    public function get($queueId)
    {
        $queue = $this->getNewEntity();
        $this->getResource()->load($queue, $queueId);
        
        return $queue;
    }
    
    
    /**
     * @param Data\QueueInterface $queue
     *
     * @return Data\QueueInterface
     *
     * @throws \Magento\Framework\Exception\AlreadyExistsException
     */
    public function save(Data\QueueInterface $queue)
    {
        $this->getResource()->save($queue);
        return $queue;
    }
    
    
    /**
     * @param Data\QueueInterface $queue
     *
     * @return $this
     *
     * @throws \Exception
     */
    public function delete(Data\QueueInterface $queue)
    {
        $this->getResource()->delete($queue);
        return $this;
    }
    
    
    /**
     * @param int $queueId
     *
     * @return QueueRepository|mixed
     *
     * @throws \Exception
     */
    public function deleteById($queueId)
    {
        /** @var Queue $queue */
        $queue = $this->get($queueId);
        return $this->delete($queue);
    }
    
    
    /**
     * @param array $data
     *
     * @return Data\QueueInterface
     */
    public function create($data = [])
    {
        /** @var Queue $queue */
        $queue = $this->getNewEntity();
        $queue->addData($data);
        
        return $queue;
    }
    
    
    /**
     * @return Queue
     */
    protected function getNewEntity()
    {
        return $this->context->objectManager()->create($this->entityClass);
    }
    
    
    /**
     * @return ResourceModel\Collection
     */
    protected function getCollection()
    {
        return $this->context->objectManager()->create($this->collectionClass);
    }
    
    
    /**
     * @return ResourceModel
     */
    protected function getResource()
    {
        return $this->context->objectManager()->create($this->resourceClass);
    }
}
